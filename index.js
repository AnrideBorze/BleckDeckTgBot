// index.js
require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Telegraf, Markup } = require('telegraf');

const {
  getFactions,
  findRowByNick,
  appendPlayerRow,
  readRow,
  updateSlot,
  appendArchive,
  getRandomFightTarget,
  getPlanTargets,
  findAllowedNick,   
} = require('./sheets');


// ===== –û–±–º–µ–∂–µ–Ω–Ω—è –æ–¥–Ω–∏–º —á–∞—Ç–æ–º (–æ–ø—Ü—ñ–π–Ω–æ) =====
const ALLOWED_CHAT_ID = (process.env.ALLOWED_CHAT_ID || '').trim();
const ALLOWED_TOPIC_ID = (process.env.ALLOWED_TOPIC_ID || '').trim();

function getUpdateChatId(ctx) {
  return (
    ctx.chat?.id ??
    ctx.message?.chat?.id ??
    ctx.channelPost?.chat?.id ??
    ctx.callbackQuery?.message?.chat?.id ??
    null
  );
}

function getUpdateThreadId(ctx) {
  return (
    ctx.message?.message_thread_id ??
    ctx.callbackQuery?.message?.message_thread_id ??
    ctx.channelPost?.message_thread_id ??
    null
  );
}

const bot = new Telegraf(process.env.BOT_TOKEN, { handlerTimeout: 9000 });

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä
bot.use((ctx, next) => {
  // 1) –ß–∞—Ç
  const chatId = getUpdateChatId(ctx);
  if (ALLOWED_CHAT_ID && String(chatId) !== ALLOWED_CHAT_ID) {
    return; // —ñ–≥–Ω–æ—Ä—É—î–º–æ –±—É–¥—å-—â–æ –Ω–µ –∑ –Ω–∞—à–æ–≥–æ —á–∞—Ç—É
  }

  // 2) –ì—ñ–ª–∫–∞ (–ª–∏—à–µ —è–∫—â–æ –≤ .env –∑–∞–¥–∞–Ω–æ ALLOWED_TOPIC_ID)
  if (ALLOWED_TOPIC_ID) {
    const threadId = getUpdateThreadId(ctx);
    // –£ —Ñ–æ—Ä—É–º–Ω–∏—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–∞—Ö —É—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—é—Ç—å message_thread_id.
    if (String(threadId) !== ALLOWED_TOPIC_ID) {
      return; // –Ω–µ –Ω–∞—à–∞ –≥—ñ–ª–∫–∞ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
    }
  }

  return next();
});


// ===== –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–ø—É "tgUserId -> nick" –ª–æ–∫–∞–ª—å–Ω–æ =====
const DATA_DIR = path.join(__dirname, 'data');
const USERS_FILE = path.join(DATA_DIR, 'users.json');
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
if (!fs.existsSync(USERS_FILE)) fs.writeFileSync(USERS_FILE, JSON.stringify({}), 'utf8');

function loadUsers() {
  try { return JSON.parse(fs.readFileSync(USERS_FILE, 'utf8')); }
  catch { return {}; }
}
let USERS = loadUsers();
function saveUsers() {
  fs.writeFileSync(USERS_FILE, JSON.stringify(USERS, null, 2), 'utf8');
}
function getNickByUserId(uid) {
  return USERS[String(uid)] || null;
}
function setNickForUser(uid, nick) {
  USERS[String(uid)] = nick.trim();
  saveUsers();
}

bot.command('fight', async (ctx) => {
  const t = await getRandomFightTarget();
  if (!t) return ctx.reply('–£ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π.');

  // –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º, —è–∫ –ø—Ä–æ—Å–∏–≤
  return ctx.reply(`üéØ ${t.building} ‚Äî ${t.player} ‚Äî ${t.deck} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(t.power)}`);
});


// ===== –°–ª–æ—Ç–∏ –∫–æ–ª–æ–¥ =====
// UX-–Ω–∞–∑–≤–∏ –∫–Ω–æ–ø–æ–∫ —ñ –Ω–æ–º–µ—Ä —Å–ª–æ—Ç–∞ (1..6)
const SLOTS = [
  { code: 's1', label: '1', index: 1 },
  { code: 's2', label: '2', index: 2 },
  { code: 's3', label: '3', index: 3 },
  { code: 'god', label: '–ë–æ–≥–∏', index: 4 },
  { code: 'r1', label: '1 —Ä–µ–∑–µ—Ä–≤–Ω–∞', index: 5 },
  { code: 'r2', label: '2 —Ä–µ–∑–µ—Ä–≤–Ω–∞', index: 6 }
];
const CODE2SLOT = Object.fromEntries(SLOTS.map(s => [s.code, s]));

// ===== –°–µ—Å—ñ—ó –¥–ª—è ‚Äú–º–∞–π—Å—Ç—Ä–∞‚Äù –≤–∏–±–æ—Ä—É =====
const sessions = new Map(); // key: userId -> { step, slotIndex, faction, page }

// ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ =====
function toIntStrict(str) {
  const s = String(str || '').replace(/[^\d]/g, '');
  if (!s) return NaN;
  // —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–µ, –±–µ–∑ –¥—Ä–æ–±—ñ–≤
  return parseInt(s, 10);
}

function buildSlotsKeyboard() {
  const rows = [
    [ Markup.button.callback('1', 'slot:s1'), Markup.button.callback('2', 'slot:s2'), Markup.button.callback('3', 'slot:s3') ],
    [ Markup.button.callback('–ë–æ–≥–∏', 'slot:god') ],
    [ Markup.button.callback('1 —Ä–µ–∑–µ—Ä–≤–Ω–∞', 'slot:r1'), Markup.button.callback('2 —Ä–µ–∑–µ—Ä–≤–Ω–∞', 'slot:r2') ],
  ];
  return Markup.inlineKeyboard(rows);
}

function buildFactionsKeyboard(factions, page=0, perPage=8, slotCode='s1') {
  const total = factions.length;
  const pages = Math.max(1, Math.ceil(total / perPage));
  const p = Math.max(0, Math.min(page, pages-1));
  const slice = factions.slice(p*perPage, p*perPage + perPage);

  const rows = slice.map((name, i) => [Markup.button.callback(name, `fac:${slotCode}:${p}:${i}`)]);
  if (pages > 1) {
    const nav = [];
    if (p > 0) nav.push(Markup.button.callback('¬´ –ù–∞–∑–∞–¥', `facnav:${slotCode}:${p-1}`));
    if (p < pages-1) nav.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ¬ª', `facnav:${slotCode}:${p+1}`));
    if (nav.length) rows.push(nav);
  }
  rows.push([Markup.button.callback('‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', 'cancel')]);
  return Markup.inlineKeyboard(rows);
}

// ===== –ö–æ–º–∞–Ω–¥–∏ =====
bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤—ñ—Ç! /help ‚Äî –¥–æ–≤—ñ–¥–∫–∞. –°–ø–µ—Ä—à—É –∑–∞–¥–∞–π –Ω—ñ–∫: /setnick <–Ω—ñ–∫>'));
bot.help((ctx) => ctx.reply([
  '–ö–æ–º–∞–Ω–¥–∏:',
  '/setnick <–Ω—ñ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤—ñ–π –Ω—ñ–∫ (—Ä—è–¥–æ–∫ —É —Å—Ç–æ–≤–ø—á–∏–∫—É ‚Äú–ù–∞—à—ñ –≥—Ä–∞–≤—Ü—ñ‚Äù).',
  '/showme [–Ω—ñ–∫] ‚Äî –ø–æ–∫–∞–∑—É—î –≤–∞—à—ñ (–∞–±–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ –Ω—ñ–∫—É) 6 –∫–æ–ª–æ–¥: 1, 2, 3, –ë–æ–≥–∏, 1 —Ä–µ–∑–µ—Ä–≤–Ω–∞, 2 —Ä–µ–∑–µ—Ä–≤–Ω–∞.',
  '/fight ‚Äî –¥–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É —Ü—ñ–ª—å –∑ ‚Äú–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è‚Äù.',
  '/enemies ‚Äî –ø–æ–∫–∞–∑—É—î –≤—Å—ñ —Ü—ñ–ª—ñ –∑ ‚Äú–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è‚Äù (–±—É–¥—ñ–≤–ª—è ‚Üí –≥—Ä–∞–≤—Ü—ñ —Ç–∞ —ó—Ö –∫–æ–ª–æ–¥–∏).',
  '/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ chatId/userId.',

  '',
  '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª–æ–¥–∏:',
  '/deck ‚Äî –º–∞–π—Å—Ç–µ—Ä –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (–æ–±–∏—Ä–∞—î—à —Å–ª–æ—Ç ‚Üí —Ñ—Ä–∞–∫—Ü—ñ—è –∑—ñ —Å–ø–∏—Å–∫—É data!B ‚Üí —Å–∏–ª–∞).',
  '/deck_<1-6>_<—Ñ—Ä–∞–∫—Ü—ñ—è>_<—Å–∏–ª–∞> ‚Äî —à–≤–∏–¥–∫–æ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤. "_" = –ø—Ä–æ–±—ñ–ª —É –Ω–∞–∑–≤—ñ —Ñ—Ä–∞–∫—Ü—ñ—ó.',
  '  –ü—Ä–∏–∫–ª–∞–¥–∏: /deck_1_–õ–µ–≥—ñ–æ–Ω_333000 ¬∑ /deck_4_–î–∏–∫–∏–π_–õ—ñ—Å_1,1 ¬∑ /deck_5_–û—Ä–¥–µ–Ω_200,5',
  '  –ü—Ä–∞–≤–∏–ª–∞ —Å–∏–ª–∏: –∑ –¥–µ—Å—è—Ç–∫–æ–≤–æ—é —á–∞—Å—Ç–∏–Ω–æ—é ‚Äî',
  '    < 100  ‚Üí –º—ñ–ª—å–π–æ–Ω–∏ (1,1 = 1.1M = 1100000)',
  '    100‚Äì999 ‚Üí —Ç–∏—Å—è—á—ñ (200,5 = 200.5K = 200500)',
  '    ‚â• 1000  ‚Üí —è–∫ —î (—Ü—ñ–ª–µ —á–∏—Å–ª–æ). –¢–∞–∫–æ–∂ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —Å—É—Ñ—ñ–∫—Å–∏ K/M.',
  '/deck_set <—Å–ª–æ—Ç> <—Ñ—Ä–∞–∫—Ü—ñ—è> <—Å–∏–ª–∞> ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞. –§—Ä–∞–∫—Ü—ñ—è –º–∞—î —ñ—Å–Ω—É–≤–∞—Ç–∏ –≤ —Å–ø–∏—Å–∫—É data!B.',

  '',
  '–°–ª–æ—Ç–∏: 1, 2, 3, –ë–æ–≥–∏ (4), 1 —Ä–µ–∑–µ—Ä–≤–Ω–∞ (5), 2 —Ä–µ–∑–µ—Ä–≤–Ω–∞ (6).',
  '–§—Ä–∞–∫—Ü—ñ—ó: –ª–∏—à–µ –∑—ñ —Å–ø–∏—Å–∫—É (data!B:B).',
  '–§–æ—Ä–º–∞—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–∏–ª–∏: 350000 ‚Üí 350K, 2000000 ‚Üí 2M.'
].join('\n')));


bot.command('id', (ctx) => {
  const chatId = ctx.chat?.id;
  const userId = ctx.from?.id;
  const threadId = ctx.message?.message_thread_id ?? ctx.callbackQuery?.message?.message_thread_id ?? '‚Äî';
  return ctx.reply(`chatId: ${chatId}\nuserId: ${userId}\nthreadId: ${threadId}`);
});

bot.command('setnick', async (ctx) => {
  const requested = ctx.message.text.split(' ').slice(1).join(' ').trim();
  if (!requested) {
    return ctx.reply('–í–∫–∞–∂–∏ –Ω—ñ–∫: /setnick <–Ω—ñ–∫>');
  }

  // 1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ data!E:E
  const allowed = await findAllowedNick(requested);
  if (!allowed) {
    return ctx.reply('‚ùå –¢–∞–∫–æ–≥–æ –Ω—ñ–∫—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤.\n–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—è –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤.');
  }

  // 2) –ü—Ä–∏–≤‚Äô—è–∑—É—î–º–æ —Å–∞–º–µ –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏–π –Ω—ñ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ
  setNickForUser(ctx.from.id, allowed);

  // 3) –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ —Ä—è–¥–æ–∫ —É "–ù–∞—à—ñ –∫–æ–ª–æ–¥–∏"
  let row = await findRowByNick(allowed);
  if (!row) row = await appendPlayerRow(allowed);

  return ctx.reply(`‚úÖ –ù—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${allowed}\n–¢–µ–ø–µ—Ä /deck ‚Äî —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–ª–æ–¥—É.`);
});

bot.command('deck_set', async (ctx) => {
  const args = ctx.message.text.slice('/deck_set'.length).trim();
  if (!args) {
    return ctx.reply('–§–æ—Ä–º–∞—Ç: /deck_set <—Å–ª–æ—Ç> <—Ñ—Ä–∞–∫—Ü—ñ—è> <—Å–∏–ª–∞>\n–ù–∞–ø—Ä.: /deck_set "–ë–æ–≥–∏" –õ–µ–≥—ñ–æ–Ω 333000');
  }

  // 1) –ü–∞—Ä—Å–∏–º–æ: –ø–æ–≤–∞–∂–∞—î–º–æ –ª–∞–ø–∫–∏ —ñ –ø—Ä–æ–±—ñ–ª–∏ —É —Ñ—Ä–∞–∫—Ü—ñ—ó
  // –ü—Ä–∏–∫–ª–∞–¥: /deck_set "1 —Ä–µ–∑–µ—Ä–≤–Ω–∞" "–î–∏–∫–∏–π –õ—ñ—Å" 250000
  // –ê–±–æ –±–µ–∑ –ª–∞–ø–æ–∫: /deck_set –ë–æ–≥–∏ –õ–µ–≥—ñ–æ–Ω 333000
  const tokens = args.match(/"[^"]+"|\S+/g) || [];
  if (tokens.length < 3) {
    return ctx.reply('–§–æ—Ä–º–∞—Ç: /deck_set <—Å–ª–æ—Ç> <—Ñ—Ä–∞–∫—Ü—ñ—è> <—Å–∏–ª–∞>\n–ù–∞–ø—Ä.: /deck_set 1 –õ–µ–≥—ñ–æ–Ω 333000');
  }

  const strip = (s) => s.replace(/^"+|"+$/g, '');
  const slotLabel = strip(tokens[0]);
  const powerStr = tokens[tokens.length - 1];
  const factionInput = strip(tokens.slice(1, -1).join(' ')).trim();

  const power = toIntStrict(powerStr);
  if (!power || isNaN(power)) {
    return ctx.reply('–°–∏–ª–∞ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º –±–µ–∑ –¥—Ä–æ–±—ñ–≤. –ù–∞–ø—Ä.: 333000');
  }

  const nick = getNickByUserId(ctx.from.id);
  if (!nick) return ctx.reply('–°–ø–µ—Ä—à—É /setnick <–Ω—ñ–∫>.');

  // 2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ª–æ—Ç–∞
  const slot = SLOTS.find(s => s.label.toLowerCase() === slotLabel.toLowerCase());
  if (!slot) {
    return ctx.reply('–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–ª–æ—Ç. –î–æ—Å—Ç—É–ø–Ω—ñ: 1, 2, 3, –ë–æ–≥–∏, 1 —Ä–µ–∑–µ—Ä–≤–Ω–∞, 2 —Ä–µ–∑–µ—Ä–≤–Ω–∞.');
  }

  // 3) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—Ä–∞–∫—Ü—ñ—ó –ø–æ —Å–ø–∏—Å–∫—É –∑ data!B:B
  const factions = await getFactions(); // –º–∞—Å–∏–≤ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–∑–≤
  const match = factions.find(f => f.toLowerCase() === factionInput.toLowerCase());
  if (!match) {
    // –ø—ñ–¥–∫–∞–∂–µ–º–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑—ñ —Å–ø–∏—Å–∫—É
    const preview = factions.slice(0, 20).join(', ');
    return ctx.reply(
      '‚ùå –¢–∞–∫–æ—ó —Ñ—Ä–∞–∫—Ü—ñ—ó –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É.\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∑–∞–ø—É—Å—Ç–∏ –º–∞–π—Å—Ç–µ—Ä /deck:\n' +
      preview + (factions.length > 20 ? '‚Ä¶' : '')
    );
  }

  // 4) –û–Ω–æ–≤–ª–µ–Ω–Ω—è
  await applyDeckUpdate({
    actor: ctx.from,
    chatId: ctx.chat?.id,
    nick,
    slotIndex: slot.index,
    slotLabel: slot.label,
    newFaction: match,   // ‚Üê —Ç—ñ–ª—å–∫–∏ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
    newPower: power
  }, ctx);
});

bot.command('showme', async (ctx) => {
  // /showme <–Ω—ñ–∫> ‚Äî —è–∫—â–æ –Ω—ñ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏, –±–µ—Ä–µ–º–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ /setnick
  const argNick = ctx.message.text.split(' ').slice(1).join(' ').trim();
  const nick = argNick || getNickByUserId(ctx.from.id);
  if (!nick) {
    return ctx.reply('–í–∫–∞–∂–∏ –Ω—ñ–∫: /showme <–Ω—ñ–∫> –∞–±–æ —Å–ø–µ—Ä—à—É –∑—Ä–æ–±–∏ /setnick <–Ω—ñ–∫>');
  }

  // —à—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ —É "–ù–∞—à—ñ –∫–æ–ª–æ–¥–∏"
  const row = await findRowByNick(nick);
  if (!row) {
    return ctx.reply('–¢–∞–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è –Ω–µ–º–∞—î.');
  }

  // —á–∏—Ç–∞—î–º–æ —Ä—è–¥–æ–∫: A(–Ω—ñ–∫), –¥–∞–ª—ñ –ø–∞—Ä–∞–º–∏: [B=f1,C=p1,D=f2,E=p2,F=f3,G=p3,H=f4,I=p4,J=f5,K=p5,L=f6,M=p6]
  const arr = await readRow(row);
  const get = (i) => (arr[i] ?? '').toString().trim() || '‚Äî';

  const f1 = get(1),  p1 = get(2);
  const f2 = get(3),  p2 = get(4);
  const f3 = get(5),  p3 = get(6);
  const f4 = get(7),  p4 = get(8);
  const f5 = get(9),  p5 = get(10);
  const f6 = get(11), p6 = get(12);

  const lines = [
  `–ö–æ–ª–æ–¥–∞ 1 ‚Äî ${f1} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p1)}`,
  `–ö–æ–ª–æ–¥–∞ 2 ‚Äî ${f2} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p2)}`,
  `–ö–æ–ª–æ–¥–∞ 3 ‚Äî ${f3} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p3)}`,
  `–ö–æ–ª–æ–¥–∞ 4 (–ë–æ–≥–∏) ‚Äî ${f4} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p4)}`,
  `–ö–æ–ª–æ–¥–∞ 5 (1 —Ä–µ–∑–µ—Ä–≤–Ω–∞) ‚Äî ${f5} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p5)}`,
  `–ö–æ–ª–æ–¥–∞ 6 (2 —Ä–µ–∑–µ—Ä–≤–Ω–∞) ‚Äî ${f6} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(p6)}`,
];


  return ctx.reply(`üë§ ${nick}\n` + lines.join('\n'));
});


// –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–ª–æ–¥–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—ñ–≤ –∑ –∞—Ä–∫—É—à–∞ "–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è"
bot.command('enemies', async (ctx) => {
  const rows = await getPlanTargets();
  if (!rows || rows.length === 0) {
    return ctx.reply('–£ ¬´–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ¬ª –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π.');
  }

  // –ì—Ä—É–ø—É—î–º–æ: –ë—É–¥—ñ–≤–ª—è -> –ì—Ä–∞–≤–µ—Ü—å -> –º–∞—Å–∏–≤ {deck, power}
  const byBuilding = new Map();
  for (const r of rows) {
    const building = (r.building || '').toString().trim() || '‚Äî';
    const player   = (r.player   || '').toString().trim() || '‚Äî';
    const deck     = (r.deck     || '').toString().trim() || '‚Äî'; // —É —Ç–≤–æ—î–º—É –æ–ø–∏—Å—ñ —Ü–µ "—Ñ—Ä–∞–∫—Ü—ñ—è/–∫–æ–ª–æ–¥–∞"
    const power    = (r.power    || '').toString().trim() || '‚Äî';

    if (!byBuilding.has(building)) byBuilding.set(building, new Map());
    const byPlayer = byBuilding.get(building);
    if (!byPlayer.has(player)) byPlayer.set(player, []);
    byPlayer.get(player).push({ deck, power });
  }

  // –§–æ—Ä–º—É—î–º–æ —Å–µ–∫—Ü—ñ—ó –ø–æ –±—É–¥—ñ–≤–ª—è—Ö
  const sections = [];
  for (const [building, byPlayer] of byBuilding) {
    const lines = [`üè∞ ${building}`];
    // –Ω–µ–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ: —Å–æ—Ä—Ç—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±—É–¥—ñ–≤–ª—ñ
    const entries = Array.from(byPlayer.entries()).sort((a, b) => a[0].localeCompare(b[0], 'uk'));
    for (const [player, items] of entries) {
      const list = items.map(it => `${it.deck} ‚Äî —Å–∏–ª–∞ ${fmtPowerShort(it.power)}`).join(' ¬∑ ');
      lines.push(`‚Äî ${player}: ${list}`);
    }
    sections.push(lines.join('\n'));
  }

  // –°–æ—Ä—Ç—É—î–º–æ –±—É–¥—ñ–≤–ª—ñ –∑–∞ –Ω–∞–∑–≤–æ—é (–Ω–µ–æ–±–æ–≤ º—è–∑–∫–æ–≤–æ)
  sections.sort((a, b) => a.localeCompare(b, 'uk'));

  // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—Ä—Ü—ñ—è–º–∏, —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç–∏ –ª—ñ–º—ñ—Ç 4096 —Å–∏–º–≤–æ–ª—ñ–≤
  let buf = '';
  for (const sec of sections) {
    const piece = (buf ? buf + '\n\n' : '') + sec;
    if (piece.length > 3500) {
      if (buf) await ctx.reply(buf);
      buf = sec;
    } else {
      buf = piece;
    }
  }
  if (buf) await ctx.reply(buf);
});


function normalizeInt(x) {
  if (x == null) return null;
  const s = String(x).replace(/[^\d]/g, ''); // –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏/–∫–æ–º–∏
  if (!s) return null;
  const n = parseInt(s, 10);
  return Number.isFinite(n) ? n : null;
}

function fmtPowerShort(x) {
  const n = typeof x === 'number' ? x : normalizeInt(x);
  if (n == null) return (x == null || x === '') ? '‚Äî' : String(x);

  if (n >= 1_000_000) {
    const v = n / 1_000_000;
    const s = (v % 1 === 0) ? String(v) : v.toFixed(2).replace(/\.?0+$/,'');
    return s + 'M';
  }
  if (n >= 1_000) {
    const v = n / 1_000;
    const s = (v % 1 === 0) ? String(v) : v.toFixed(1).replace(/\.?0+$/,'');
    return s + 'K';
  }
  return String(n);
}

// ==== –•–µ–ª–ø–µ—Ä–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—Ä–∞–∫—Ü—ñ—ó —Ç–∞ —Å–∏–ª–∏ ====
function normalizeSpaces(s) {
  return String(s || '')
    .replace(/_/g, ' ')          // –≤ –∫–æ–º–∞–Ω–¥—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ ‚Äî –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
    .replace(/\s+/g, ' ')
    .trim();
}

// —à—É–∫–∞—î —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥ —Ñ—Ä–∞–∫—Ü—ñ—ó (–±–µ–∑ —Ä–µ–≥—ñ—Å—Ç—Ä—É, –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é –ø—Ä–æ–±—ñ–ª—ñ–≤/–ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω—å)
async function pickFactionOrNull(input) {
  const factions = await getFactions();
  const norm = normalizeSpaces(input).toLowerCase();
  const match = factions.find(f => normalizeSpaces(f).toLowerCase() === norm);
  return { match, factions };
}

// –†–æ–∑–±—ñ—Ä —Å–∏–ª–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏:
//  - —è–∫—â–æ —î –¥–µ—Å—è—Ç–∫–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: <100 => –ú, 100..999 => –ö, >=1000 => —è–∫ —î
//  - —è–∫—â–æ –±–µ–∑ –¥–µ—Å—è—Ç–∫–æ–≤–æ—ó ‚Äî —è–∫ —î (—Ü—ñ–ª–µ)
//  - —Ç–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—É—Ñ—ñ–∫—Å—ñ–≤ k/m (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
function parsePowerSmart(raw) {
  if (raw == null) return NaN;
  let s = String(raw).trim().toLowerCase().replace(/\s+/g, '');

  // –ø—Ä–∏–π–º–∞—î–º–æ —Ç–∞–∫–æ–∂ k/m —Å—É—Ñ—ñ–∫—Å–∏
  if (/[km–º–∫]$/.test(s)) {
    const num = parseFloat(s.replace(/[^\d.,]/g, '').replace(',', '.'));
    if (!isFinite(num)) return NaN;
    if (/[m–º]$/.test(s)) return Math.round(num * 1_000_000);
    if (/[k–∫]$/.test(s)) return Math.round(num * 1_000);
  }

  // –∑–≤–∏—á–∞–π–Ω—ñ —á–∏—Å–ª–∞ –∑/–±–µ–∑ –¥–µ—Å—è—Ç–∫–æ–≤–æ—ó
  const hasDec = /[.,]/.test(s);
  const val = parseFloat(s.replace(',', '.'));
  if (!isFinite(val)) return NaN;

  if (hasDec) {
    if (val < 100) return Math.round(val * 1_000_000);       // 1,1 => 1.1M
    if (val < 1000) return Math.round(val * 1_000);          // 200,5 => 200.5K
    return Math.round(val);                                   // 1234,5 => 1235
  } else {
    // –±–µ–∑ –¥–µ—Å—è—Ç–∫–æ–≤–æ—ó ‚Äî –∞–±—Å–æ–ª—é—Ç
    return Math.round(val);
  }
}

// –®–≤–∏–¥–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤: /deck_<1-6>_<—Ñ—Ä–∞–∫—Ü—ñ—è>_<—Å–∏–ª–∞>
// –ø—Ä–∏–∫–ª–∞–¥–∏: /deck_1_–õ–µ–≥—ñ–æ–Ω_333000
//           /deck_4_–î–∏–∫–∏–π_–õ—ñ—Å_1,1
//           /deck_5_–û—Ä–¥–µ–Ω_200,5
bot.hears(/^\/deck_(\d)(?:@[\w_]+)?_([^_]+)_(.+)$/i, async (ctx) => {
  try {
    const slotNum = parseInt(ctx.match[1], 10);
    if (!(slotNum >= 1 && slotNum <= 6)) {
      return ctx.reply('–ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 6.');
    }

    const factionRaw = ctx.match[2];
    const powerRaw = ctx.match[3];

    const { match: faction, factions } = await pickFactionOrNull(factionRaw);
    if (!faction) {
      const preview = factions.slice(0, 20).join(', ');
      return ctx.reply(
        '‚ùå –¢–∞–∫–æ—ó —Ñ—Ä–∞–∫—Ü—ñ—ó –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É.\n' +
        '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –æ–¥–Ω—É –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –∑–∞–ø—É—Å—Ç–∏ –º–∞–π—Å—Ç–µ—Ä /deck.\n' +
        preview + (factions.length > 20 ? '‚Ä¶' : '')
      );
    }

    const power = parsePowerSmart(powerRaw);
    if (!isFinite(power) || power <= 0) {
      return ctx.reply('‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Å–∏–ª–∞. –ü—Ä–∏–∫–ª–∞–¥: 333000 –∞–±–æ 1,1 (—Ü–µ 1.1–ú) —á–∏ 200,5 (—Ü–µ 200.5–ö).');
    }

    const nick = getNickByUserId(ctx.from.id);
    if (!nick) return ctx.reply('–°–ø–µ—Ä—à—É /setnick <–Ω—ñ–∫>.');

    const slot = SLOTS.find(s => s.index === slotNum);
    if (!slot) return ctx.reply('–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–ª–æ—Ç. –î–æ—Å—Ç—É–ø–Ω—ñ 1-6.');

    await applyDeckUpdate({
      actor: ctx.from,
      chatId: ctx.chat?.id,
      nick,
      slotIndex: slot.index,
      slotLabel: slot.label,
      newFaction: faction, // —Ç—ñ–ª—å–∫–∏ –∑—ñ —Å–ø–∏—Å–∫—É
      newPower: power
    }, ctx);
  } catch (e) {
    console.error('deck_fast error', e);
    return ctx.reply('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–ª–æ–¥–∏.');
  }
});


// ===== –ó–∞–ø—É—Å–∫ =====
bot.launch();
console.log('Guild bot is running (polling)‚Ä¶');

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
